#include <stdio.h>
#include <libyuv.h>
#include "SkBitmap.h"

#ifdef __cplusplus
extern "C"
{
#endif
#include <libavcodec/avcodec.h>
#include <libavformat/avformat.h>
#ifdef __cplusplus
};
#endif

#include <GLFW/glfw3.h>
#include <mac/include/effects/SkGradientShader.h>
#include <iostream>
#include "SkBitmap.h"
#include "SkPaint.h"
#include "SkCanvas.h"
#include "SkRect.h"
#include "SkTypes.h"

#pragma comment(lib, "glfw3.lib")

//窗口大小变化时，重新设置视口
void framebuff_size_callback(GLFWwindow* window, int width, int height) {
    glViewport(0, 0, width, height);
}

//处理输入
void process_input_callabck(GLFWwindow *window, int key, int scancode, int action, int mods) {
    if (key == GLFW_KEY_ESCAPE && action == GLFW_PRESS) {
        glfwSetWindowShouldClose(window, true);
    }
}
#include "SkImageEncoder.h"
#include "GrContext.h"
#include "gpu/gl/GrGLInterface.h"
#include "GrBackendSurface.h"
#include "SkSurface.h"
#include "glog/logging.h"

sk_sp<SkSurface>  sk_surface_ = nullptr;        //
SkCanvas*         sk_canvas_ = nullptr;         // 视频画布

bool MakeSkGPUCanvas(int w, int h, unsigned int fbo, SkCanvas*& sk_canvas) {
    auto interface = GrGLMakeNativeInterface();
    LOG(INFO) << "GrGLMakeNativeInterface 2 interface=" << interface << " fbo=" << fbo;

    sk_sp<GrContext> gr_context(GrContext::MakeGL(interface));

    GrGLFramebufferInfo info;
    info.fFBOID = fbo;
    info.fFormat = 0x8058;
    static const int kMsaaSampleCount = 0; //4;
    static const int kStencilBits = 0;  // Skia needs 8 stencil bits
    GrBackendRenderTarget target(w, h, kMsaaSampleCount, kStencilBits, info);

    SkSurfaceProps props(SkSurfaceProps::kLegacyFontHost_InitType);

    sk_surface_ = sk_sp<SkSurface>(SkSurface::MakeFromBackendRenderTarget(gr_context.get(),
                                                                          target,
                                                                          kBottomLeft_GrSurfaceOrigin,
                                                                          kRGBA_8888_SkColorType,
                                                                          SkColorSpace::MakeSRGB(),
                                                                          &props));

    sk_canvas = sk_surface_->getCanvas();
    if (nullptr == sk_canvas) {
        LOG(ERROR) << "getCanvas failed";
        return false;
    }
    LOG(INFO) << "gpu sk_canvas_=" << sk_canvas;

//    sk_surface_preprocess_ = CreateSnapshotSurface(gr_context.get(), SkISize::Make(w, h));
//    LOG(INFO) << "sk_surface_preprocess_=" << sk_surface_preprocess_;
//    sk_canvas_preprocess_ = sk_surface_preprocess_->getCanvas();
//    LOG(INFO) << "sk_canvas_preprocess_=" << sk_canvas_preprocess_;
//    SkMatrix matrix;
//    matrix.setAll(1, 0, 0, 0, -1, h, 0, 0, 1);
//    sk_canvas_preprocess_->concat(matrix);
    return true;
}

int openCodecContext(const AVFormatContext *pFormatCtx, int *pStreamIndex, enum AVMediaType type, AVCodecContext **ppCodecCtx)
{
    int streamIdx = -1;
    // 获取流下标
    for (int i = 0; i < pFormatCtx->nb_streams; i++)
    {
        if (pFormatCtx->streams[i]->codec->codec_type == type)
        {
            streamIdx = i;
            break;
        }
    }
    if (streamIdx == -1)
    {
        printf("find video stream failed!\n");
        exit(-2);
    }
    // 寻找解码器
    AVCodecContext  *pCodecCtx = pFormatCtx->streams[streamIdx]->codec;
    AVCodec *pCodec = avcodec_find_decoder(pCodecCtx->codec_id);
    if (NULL == pCodec)
    {
        printf("avcode find decoder failed!\n");
        exit(-2);
    }

    //打开解码器
    if (avcodec_open2(pCodecCtx, pCodec, NULL) < 0)
    {
        printf("avcode open failed!\n");
        exit(-2);
    }
    *ppCodecCtx        = pCodecCtx;
    *pStreamIndex    = streamIdx;

    return 0;
}

int main(void)
{
    AVFormatContext    *pInFormatCtx    = NULL;
    AVCodecContext  *pVideoCodecCtx    = NULL;
    AVCodecContext  *pAudioCodecCtx    = NULL;
    AVPacket *pPacket    = NULL;
    AVFrame *pFrame        = NULL;
    int ret;
    /* 支持本地文件和网络url */
    const char streamUrl[] = "./test.mp4";

    /* 1. 注册 */
//    av_register_all();

    pInFormatCtx = avformat_alloc_context();

    /* 2. 打开流 */
    if(avformat_open_input(&pInFormatCtx, streamUrl, NULL, NULL) != 0)
    {
        printf("Couldn't open input stream.\n");
        return -1;
    }

    /* 3. 获取流的信息 */
    if(avformat_find_stream_info(pInFormatCtx, NULL) < 0)
    {
        printf("Couldn't find stream information.\n");
        return -1;
    }

    int videoStreamIdx = -1;
    int audioStreamIdx = -1;
    /* 4. 寻找并打开解码器 */
    openCodecContext(pInFormatCtx, &videoStreamIdx, AVMEDIA_TYPE_VIDEO, &pVideoCodecCtx);
    openCodecContext(pInFormatCtx, &audioStreamIdx, AVMEDIA_TYPE_AUDIO, &pAudioCodecCtx);

    pPacket    = av_packet_alloc();
    pFrame    = av_frame_alloc();

    int cnt = 30;

    glfwInit();		//初始化GLFW

    //指明OpenGL版本
    //glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
    //glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
    //glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);

    //创建窗口
    GLFWwindow* window = glfwCreateWindow(800, 600, "OpenGLTest1", NULL, NULL);
    if (window == NULL) {
        std::cout << "Failed to create GLFW window " << std::endl;
        //销毁所有窗口
        glfwTerminate();
        return -1;
    }
    //将该窗口作为当前线程的主上下文
    glfwMakeContextCurrent(window);

    //处理输入
    glfwSetKeyCallback(window, process_input_callabck);

    //设置视口Viewport
    //前两个参数控制渲染窗口左下角的相对位置，第三和第四个参数控制渲染窗口的宽度和高度
    //OpenGL会在此窗口大小范围内进行坐标变换

    //监听窗口大小变化
    glfwSetFramebufferSizeCallback(window, framebuff_size_callback);
    glViewport(0, 0, 800, 600);
    MakeSkGPUCanvas(800, 600, 0, sk_canvas_);

    bool flag = true;

    while (!glfwWindowShouldClose(window) ) {
        if ( flag && cnt--){
            /* 5. 读流数据, 未解码的数据存放于pPacket */
            ret = av_read_frame(pInFormatCtx, pPacket);
            if (ret < 0) {
                printf("av_read_frame error\n");
                flag = false;
                break;
            }

            /* 6. 解码, 解码后的数据存放于pFrame */
            /* 视频解码 */
            if (pPacket->stream_index == videoStreamIdx) {
                avcodec_decode_video2(pVideoCodecCtx, pFrame, &ret, pPacket);
                if (ret == 0) {
                    printf("video decodec error!\n");
                    continue;
                }
                printf("* * * * * * video * * * * * * * * *\n");
                printf("___height: [%d]\n", pFrame->height);
                printf("____width: [%d]\n", pFrame->width);
                printf("pict_type: [%d]\n", pFrame->pict_type);
                printf("___format: [%d]\n", pFrame->format);


                AVFrame *rgbFrame = av_frame_alloc();
                rgbFrame->width = pFrame->width;
                rgbFrame->height = pFrame->height;
                rgbFrame->format = AV_PIX_FMT_RGBA;
                av_frame_get_buffer(rgbFrame, 32);

                libyuv::I420ToARGB(pFrame->data[0], pFrame->linesize[0],
                                   pFrame->data[2], pFrame->linesize[2],
                                   pFrame->data[1], pFrame->linesize[1],
                                   rgbFrame->data[0], rgbFrame->linesize[0],
                                   pFrame->width, pFrame->height);

                printf("* * * * * * * * * * * * * * * * * * *\n\n");


                SkBitmap bitmap;
                bitmap.installPixels(
                        SkImageInfo::MakeN32(pFrame->width, pFrame->height, SkAlphaType::kUnpremul_SkAlphaType),
                        rgbFrame->data[0], rgbFrame->linesize[0], nullptr, nullptr);

                sk_canvas_->clear(0);
                sk_canvas_->drawBitmap(bitmap, 0, 0, nullptr);
                glfwMakeContextCurrent(window);
                sk_canvas_->flush();
                glfwSwapBuffers(window);
                //检查有没有触发什么事件（键盘输入、鼠标移动等)、窗口改变
                glfwPollEvents();
            }

        }




        /* 音频解码 */
        if (pPacket->stream_index == audioStreamIdx) {
            avcodec_decode_audio4(pAudioCodecCtx, pFrame, &ret, pPacket);
            if (ret < 0) {
                printf("audio decodec error!\n");
                continue;
            }
            printf("* * * * * * audio * * * * * * * * * *\n");
            printf("____nb_samples: [%d]\n", pFrame->nb_samples);
            printf("__samples_rate: [%d]\n", pFrame->sample_rate);
            printf("channel_layout: [%llu]\n", pFrame->channel_layout);
            printf("________format: [%d]\n", pFrame->format);
            printf("* * * * * * * * * * * * * * * * * * *\n\n");
        }
        av_packet_unref(pPacket);

    }

    av_frame_free(&pFrame);
    av_packet_free(&pPacket);
    avcodec_close(pVideoCodecCtx);
    avcodec_close(pAudioCodecCtx);
    avformat_close_input(&pInFormatCtx);
    glfwTerminate();
    return 0;
}
